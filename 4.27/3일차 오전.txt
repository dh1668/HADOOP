자바의 중요성★★ 하둡할때 MAP Reduce 사용시

wget https://s3.amazonaws.com/hadoopkr/data.tar.gz		<아마존 aws 하둡 



데몬이란? <daemon>
리눅스 시스템이 처음 가동될 때 실행되는 백그라운드 프로세스의 일종으로 메모리에 상주하면서
 특정 요청이 오면 즉시 대응할 수 있도록 대기 중인 프로세스


tty		: 내가쓰는게 pts
TTY(teletypewriter) 항목은 리눅스 디바이스 드라이브중에서 콘솔이나 터미널을 의미


wall		: 내시스템이 연결된 tty 
ex)사용예시:	which wall , wall 쓰면됌
wall 명령어는 리눅스 시스템에서 사용자의 터미널로 메세지를 보내는 방법 중 하나입니다.
터미널에 접속된 사용자라면 누구든지 wall 명령어로 터미널에 메세지를 보낼 수 있습니다.




Data read 와 Data write차이 	<사진참고>

DataWrite 에서는
데이터 노드의 역할 이 가장중요


HDFS
NOSQL		HBASE		★NoSQL은 관계 끊어지면 잘 안돼는경우가 많음
Sgoop
RDBMS
-----------------------------------------------------------------------------------------------------
NOSQL <비정형데이터>
 - Not-only SQL 또는 NO SQL 의미
 - 전통적인 관계형 DBMS 와 달리 설계된 관계형 데이터 베이스를 의미
 - 기존 관계형 DBMS가 빅데이터 처리시 발생하는 수평확장 , 성능한계를 극복하기 위해
	인터넷 기업들이 고안해낸 새로운 개념의 DBMS
 - Key 와 Value 쌍으로이루어짐

- NOSQL은 일관성( Consistency ) 포기한대신 확장가능성이랑 가용성 을 중요시함 < A+P >

- 관계형 데이터베이스 <RDBMS = MYSQL, postges, etc>는 CA 시스템이다. 일관성(C)와 가용성(A)를 보장하되, 
	분단 허용성(P)는 보장하지 않는다

대부분의 NoSQL 데이터베이스는 CA가 아닌 CP나 AP 시스템이다. <C를 오부분허용>
대용량의 분산 시스템을 구축하는데에는 CP보다도 AP가 알맞다. 
C가 들어가서 강력한 일관성 즉, ACID 트랜잭션을 지원한다고 가정하면 
예를 들어 하나의 쓰기 작업을 수행한다고 가정할 때 2대가 정상 응답할 때까지 LOCK이 걸리겠지만 
100대라면 너무 긴 시간동안 LOCK이 걸리게 된다.




★★CAP 이론

CAP 정리에 의하면 시스템은 일관성(Consistency), 가용성(Availablity), 분단 허용성(Partition torlerance) 
★세 가지 속성중에서, 두 가지만 가질 수 있다는 것이다.
=>>> 데이터베이스에서 3가지 다 만족하는 것은 아직도 없다 <만족할수도없기 때문임>


	가용성 
일관성 		확장가능성


일관성(Consistency) : 데이터를 저장하는 장비가 1대 든 100대든 모든 장비에서 
		동일한 데이터가 저장되어 있어야 한다는 것이다.
		ACID 원리에서 의미하는 것과 같다. 어떤 데이터베이스 속성에 C가 있다면, 
		트랜잭션 기능 또는 그와 비슷한 매커니즘이 존재한다는 뜻이다.

가용성(Availablity) : 가용성은 죽지 않은 상태의 모든 서버는 클라이언트에게 
=유용성		항상 정상 처리 응답을 보애주어야 한다는 것을 의미한다. 
		클라이언트가 읽기, 쓰기 요청을 하면 제대로 읽고 쓰는 작업을 해야한다. 
		현재 시스템에 문제가 있어서 읽을 수 없다고 보내면 가용성이 보장되지 않는 것을 뜻한다.

분단 허용성(Partition tolerance, =확장가능성) : 분단 허용성은 클러스터가 여러 대 동작하고 있을 때, 
		해당 클러스터 사이에 접속이 단절되어 서로 통신을 할 수 없는 상황에서도 
		시스템이 잘 동작해야 한다는 것이다.



Mongo DB 쓰는이유  : 비관계형데이터 수집을 위해 사용.
		CAP이론 적목시켜 말할경우 비동기화된 스토어 작업에 필수적


C+P : 모든 노드가 함께 퍼포먼스 내야하는 성능형	대표 :구글의 BigTable ,HBase
	- 대용량 분산 , 성능보장형 서비스에 적합		Hyper Table

A+P : 비 동기화된 스토어 작업에 필수적		대표 : Dynamo , oracle Coherence, 		
	- SNS 서비스에 적합			Apache Cassandra, CouchDB
						Tokyo cabinet 
		동기: 실시간 <동시에 일어나는>
		비동기:  <동시에 일어나지 않는>

C+A : 시스템이 죽더라도 메시지 손실은 방지하는
	강한 신뢰형(트랜잭션이 필요한 경우 필수적)	대표: RDBMS


-------------------------------------------------------------------------------------------------------
Zookeeper
- 빅데이터 처리기술
- 분산 상호조정 서비스 이용해 일반적인 분산응용프로그램 구축

특징
- 다양하게 활용가능
- 고가용성 지원
- 느슨하게 연결된 상호 작명을 제공
- 상호 조정을 위한 라이브러리


Pig  <책 16장>	데이터 탐색용 : 분산데이터저장(HDFS) 공간에서 신속하게 검색하는용도 라고 생각하면편함
빅데이터 처리기술
- 대규모 데이터셋 탐색용 데이터 흐름 언어와 실행환경
- 하이브에 대비해서 프로그래밍 기능 제공
- Pig Latin이라는 데이터셋 플로우 제어언어 제공하고 내부 컴파일러에 의해 맵리듀스 잡들로 변환
- 신속한 HDFS 데이터 분석 시 활용됨


Hive <책 17장 >      = 분산데이터를 필요한 정보를 수집한다는것
- 빅 데이터 처리 기술 중 분산 데이터웨어 하우스 기술
데이터웨어 하우스 :  Raw Data Lake >> Raw Data Warehouse 
=> 날것의 데이터를 필요한 정보만 수집하는것.(단 데이터가공은안함) => Data Analylist <무에서 유를 창조> 	

- HDFS에 저장된 대용량 데이터셋 분석 기능 제공
- 데이터 쿼리를 위해 SQL과 흡사한 HiveQL 언어 지원하며, hiveQL로 작성된
  스크립트는 하이브 컴파일러가 MapReduce 잡들로 변환
- 사용자는 MapReduce 프로그램을 몰라도 사용 가능 처리 성능 제한
	삼성, CSNC <대표적>


강사님 설명:

관계형 데이터 베이스 <SQL>
정형데이터 : 
키와 값이 테이블 형태로 저장되어 있고 
EX) 강사 , 수업 테이블의 칼럼을 찾으면 원하는 정보의 키와 값을 찾을수 있다.

비관계형 데이터 베이스 <NOSQL>
비정형데이터 :
키와 값이 있지만 테이블 형태가 아닌 날것그대로 저장되는 형태
요즘 데이터베이스의 트렌드가 NOSQL 이라고하심

하둡을 배우는이유 :
방대할 정도로 많은양의 데이터를 분산처리하고 원하는정보만 쓰기 위해서
데이터를 분산시키고 재가공해서 사용하는거임.
MYSQL 같은것도 쓸 수 있지만 트렌드에 맞춰 NOSQL 을 쓰는 것이 많기 때문





강사님 추천 사이트 :  https://www.tailorbrands.com/llc-formation
>> 사업 브랜드 접목사이트  


-------------------------------------------------------------------------------------------------------------
			Hadoop 자주 쓰는 명령어 정리
준비 : 	start-dfs.sh
	start-yarn.sh 

	명령어				기능				비고	

hadoop fs -mkdir /input		input디렉토리 만들기		한번에한개씩만들어야함
hadoop fs -mkdir /input/wex

hadoop fs -rmr /output		output 디렉토리 삭제

hadoop fs -ls /output/...		output 디렉토리 view

hadoop fs -cat /output		output 디렉토리 파일내용 보기

hadoop fs -copyFromLocal /input	Input 디렉토리에 data파일 COPY	리눅스>>하눕

hadoop fs -copyToLocal /input	input에 있는 데이터를 복사해 리눅스에 붙여넣는다    하눕>>리눅스

hadoop fs -put * /input		*(=모든것,메타캐릭터) 모든데이터를 input에 넣는다

diff README.txt R.txt		내용물 다른거 가르쳐주는 용도 <vi 편집기로 내용다른것만 말해준다


mv /home/dh1668/hadoopUSB /home/dh1668/hadoopUSB/source/WordCount
cp  /home/dh1668/hadoopUSB  /home/dh1668/hadoopUSB/source/WordCount



★★★리눅스 ls 명령어로는 절대안보임
분산데이터 파일시스템 이기때문에 hadoop fs -ls 	Hadoop명령어를 써야만 보인다
----------------------------------------------------------------------------------------------------
mvn compile 		target 디렉토리 생성	폴더안에 들어가서 하면안됌
						<그전 디렉토리위치에서해야함>
mvn install		jar 압축파일 생성		폴더안에 들어가서 하면안됌
						<그전 디렉토리위치에서해야함>
rm ./target/*.jar		기존 실행 자바파일 삭제

---------------------------------------------------------------------------------------------------------
hadoop jar target/WordCount-1.0-SNAPSHOT.jar WordCount /input/README.txt /output/WordCount
=>(jar 실행명령어)	 ( .jar = 실행시킬파일이름의 경로 )  ( 앞에 WordCount이름이름 무조건 같게, =프로그램명 )
( /input/README.txt 는 WordCount할 파일지정  )    (  /output/WordCount 는 결과를 지정시킬 디렉토리, 1번 실행할때마다 저장이름 바꿔야함 ) 	






hadoop fs -cat /output/WordCount/part-r-00000
=>





1. 하둡파일시스템에서 
3. /output/WordCount/part-r-00000 이라는 이름의 파일에 저장된 거에서
2. cat한다  


hadoop fs -ls -R /
ls --




















----------------------------------------------------------------------------------------------------
컴바이너(combiner) :  ★사용이유?  프로세스의 부담감을 낮추기 위해 사용하는거임

 - Mapper의 중간 출력 결과를 받아서 리듀스에게 전달해주는 기능.

 - Mapper와 Reducer 사이의 셔플할 데이터의 양을 줄이는데에 도움을 준다.

 - 하지만 컴바이너를 사용 할 수 없는 맵리듀스 패턴이 존재하기도 한다.(맵리듀스 디자인 고려)


출처: https://1004jonghee.tistory.com/entry/MapRedcue-컴바이너Combiner 
---------------------------------------------------------------------------------------------------------
깊은 복사(Deep Copy)는 '실제 값'을 새로운 메모리 공간에 복사하는 것을 의미하며,

얕은 복사(Shallow Copy)는 '주소 값'을 복사한다는 의미입니다.
----------------------------------------------------------------------------------------------------------
































